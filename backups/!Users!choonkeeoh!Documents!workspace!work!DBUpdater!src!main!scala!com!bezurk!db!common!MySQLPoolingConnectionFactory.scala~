package com.bezurk.db.common


import java.sql.{SQLException, Connection}
import org.apache.commons.dbcp.{PoolableConnectionFactory, DriverManagerConnectionFactory, PoolingDataSource}
import org.apache.commons.pool.impl.{GenericObjectPool, StackKeyedObjectPoolFactory}

class MySQLPoolingConnectionFactory(
  minOpenConnections: Int,
  maxOpenConnections: Int,
  checkConnectionHealthWhenIdleFor: Long,
  maxWaitForConnectionReservation: Long,
  checkConnectionHealthOnReservation: Boolean,
  evictConnectionIfIdleFor: Long,
  serverName: String,
  portNumber: String,
  databaseName: String,
  userName: String,
  password: String) extends ConnectionFactory(serverName, portNumber, databaseName, userName, password){

  Class.forName("com.mysql.jdbc.Driver")
  
  private val config = new GenericObjectPool.Config
  config.maxActive= maxOpenConnections
  config.maxIdle = maxOpenConnections
  config.minIdle = minOpenConnections
  config.maxWait = maxWaitForConnectionReservation
  
  config.timeBetweenEvictionRunsMillis = checkConnectionHealthWhenIdleFor
  config.testWhileIdle = true
  config.testOnBorrow = checkConnectionHealthOnReservation
  config.minEvictableIdleTimeMillis = evictConnectionIfIdleFor

  private val connectionPool = new GenericObjectPool(null, config)
  val url ="jdbc:mysql://"+serverName+":"+portNumber+"/"+databaseName
  private val connectionFactory = new DriverManagerConnectionFactory(url, userName, password)
  private val poolableConnectionFactory = new PoolableConnectionFactory(
    connectionFactory,
    connectionPool,
    null,
    "/* ping */ SELECT 1",
    false,
    true)
  private val poolingDataSource = new PoolingDataSource(connectionPool)

  def connection:Connection={
    poolingDataSource.getConnection()
  }
  
  
  def close(connection: Connection) {
    try {
      connection.close()
    } catch {
      case _: SQLException =>
    }
  }
}
