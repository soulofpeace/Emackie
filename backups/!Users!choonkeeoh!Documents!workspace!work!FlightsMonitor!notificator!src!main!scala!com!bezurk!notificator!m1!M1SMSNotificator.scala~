package com.bezurk.notificator.m1

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.apache.commons.lang.StringUtils;


class M1SMSNotificator extends Notificator {
  val sendUrl:String = "http://msgctr.m1.com.sg/MessageCentre/jsp/guest/processMessage.jsp"
  
  def sendNotification(message:String, recipients:Array[String]){
    recipients.foreach(arg=>sendNotification(message, arg))
  }
  
  def sendNotification(message:String, recipient:String){
    val params:HttpClientParams = new HttpClientParams()
    params.setConnectionManagerTimeout(10000)
    val client:HttpClient = new HttpClient(params)
    val post:PostMethod = new PostMethod(sendUrl)
    try{
      val recipientNumber = recipient.toInt
      post.setQueryString(Array[NameValuePair](
        new NameValuePair("msisdn", recipient),
        new NameValuePair("counter", String.valueOf(message.length)),
        new NameValuePair("msg", message)
      ));
      client.executeMethod(post);
      val response:String = post.getResponseBodyAsString()
      if(response.indexOf("thankyou")== -1){
        println("Failed to send message")
        throw new NotificationError("Failed to Send Message")
      }
    }
    catch{
      case ex:NumberFormatException=>{
          throw new NotificationError(recipient+" is not a valid number", ex);
      }
      case ex:Exception =>{
        throw new NotificationError(ex);
      }
    }
    finally{
      post.releaseConnection()
    }
  }
}
